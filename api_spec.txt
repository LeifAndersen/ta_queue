/*
 *  TA Queue API Spec
 *
 *  This API follows typical RESTful/Rails conventions for creating/reading/updating/destroying (CRUD) resources, such as Boards, Students, and TA's.
 *
 *  Please read this entire spec before building a client, as it clarifies conventions used in the API and general tips.
 *
 *  Resource Specs
 *  =================
 * 
 *  Board -
 *    Boards are the highest level resource. It is called a Board (as opposed to a Queue) because there will be future additions to this app besides
 *    the Queue portion, such as a discussion board and others, all of which will be part of the Board.
 *
 *    Associations -
 *        has_one queue
 *        has_one ...     // Other stuff will be added in the future
 *        has_many students
 *        has_many tas    // tas is the plural of TA
 *  TA -
 *    TA's are authorized to change their own state (such as username, status, etc), the state of the Queue (active/inactive, frozen/unfrozen), as
 *    well as some of the state of a student (in queue/not in queue).
 *
 *    Associations -
 *      belongs_to board
 *      has_one student // The student they are currently helping, nil if they aren't helping anyone 
 *
 *  Student -
 *    Students are authorized to change their own state, including username, location, and whether they're in the Queue or not
 *
 *    Associations -
 *      belongs_to board
 *      belongs_to ta
 *
 *  NOTES:
 *  ==============
 *
 *  Generally speaking, security is not a priority of this service. Passwords are used to create Queues and for TA's to log in, but at the time of
 *  this writing, these passwords are considered non-critical and are not encrypted. There is not much to gain by securing this information at
 *  this point in time
 *
 *  We will here make a distinction between changing the "state" of a resource (such as a Student's username) and performing an "action", such as
 *  entering the queue, etc.
 *
 *  State:
 *  -----------------
 *  Following Rails conventions in passing parameters, if you are updating the "state" of a resource, you must put the attribute you intend to
 *  update in square brackets ([ ]) after the resource you are updating . If you wanted to update the username of a TA, you would use the following request:
 *  
 *    PUT /boards/:board_title/tas/:id
 *    Parameters:
 *      {
 *        ta[username] = "some new username"
 *      }
 *
 *  Same goes for creation.
 *
 *  Action:
 *  -----------------
 *  When performing an action, such as adding yourself to the queue, those actions will be performed by a single GET request with no parameters
 *  via URL extensions (as much as possible).
 *
 *  For example, if you are a student and you want to enter the queue, you would perform the following request:
 *
 *    GET /boards/:board_title/queue/enter_queue
 *
 *  Since you are using HTTP Basic authentication (read further down in the notes for clarification on HTTP Basic), the server will be able to
 *  figure out that you are a student and add you to the queue. If you were a TA, it would reject the request.
 *
 *  NOTE: The general convention is the following: when an action occurs between two resources, it's the receiving resource that implements the action.
 *        In the above example, the Queue is the receiver of the action from the Student, so it is part of the Queue API, not the Student's.
 *
 *  Other Examples of performing actions:
 *
 *    TA accepting a student:
 *
 *      GET /boards/:board_title/students/:student_id/ta_accept
 *
 *    TA removing a student:
 *
 *      GET /boards/:board_title/students/:student_id/ta_remove
 *
 *    Student exiting the Queue:
 *  
 *      GET /boards/:board_title/queue/exit_queue
 *  
 *    Student upvoting a discussion question (Not yet implemented, just an example)
 *
 *      GET /boards/:board_title/discussion/questions/:id/upvote
 *
 *  ----------------------------------------------------------------------------------------
 *
 *  The notion of "logging in/out" is synonymous with creating and deleting: to create a TA or Student is to login, and to destroy them is to logout.
 *  Upon creating a Student or TA, the client will recieve that User's username, id, and token in response. The id and token should be stored somewhere
 *  persistent as it will be used in most other requests as a sort of "username and password"
 *
 *  HTTP Basic:
 *  ---------------------------
 *  HTTP Basic is a method of authenticating where you send your username and password in the HTTP Header. See this wikipedia article for further clarification:
 *  
 *    http://en.wikipedia.org/wiki/Basic_access_authentication
 *
 *  Note that you will need to base64-encode the credentials, most frameworks have this implemented, or one is surely available on the internet somewhere
 *  ---------------------------
 *
 *  In an effort to keep the state of the Board current in terms of who is logged in and who is not, there will also be some notion of "staying alive" 
 *  where clients will be required in some way to notify the server on a regular basis that they are still logged in. The database will be purged fairly
 *  regularly (anywhere from every couple of minutes to every half hour, depending on what is decided) to keep the state current. We welcome feedback
 *  on the best approach to this.
 *
 *  Web browsers can "fake" PUT and DELETE requests to the server
 *  by sending _method:"PUT" or _method:"DELETE" in the parameters of
 *  a POST request
 */
======================
      BOARD API
======================

Actions:
-------------
  URL:
    /boards/:board_title/ -
      toggle_active - Authentication - TA

------ READ ------

GET /boards
  Authentication: None
  Response:
    {
      boards:
      [
        {
          title:"some_title,
          active:true/false,
          frozen:true/false
        },
        {
          ...
        }
      ]
    }

// Returns the state of just about everything:
//   Activity/Frozen state of the queue
//   Logged in Students/TA's
//   Students/TA's in the Queue
GET /boards/:board_title
  Format: HTML - Shows the queue for the user (uses session variable to find who it is)
  Authentication: Student or TA
  Response: 
    Success code: 200
    {
      active:true/false,
      frozen:true/false,

      students: 
      [ 
        student: 
        { 
          id:some_id_1,
          username:"user1", 
          location:"location1" 
        },
        student: 
        { 
          id:some_id_2,
          username:"user2", 
          location:"location2" 
        }
      ]
      tas:
      [
        ta:
        {
          id:some_ta_id_1,
          username:"ta1",
          location:"ta_location_1",
          current_student:some_student_id
        },
        ta:
        {
          id:some_ta_id_2,
          username:"ta2",
          location:"ta_location_2",
          current_student:some_student_id
        }
      ]

      queue:
      {
        students:
        [
          {
            ...
          },
          {
            ...
          }
        ],
        tas:
        [
          {
            ...
          },
          {
            ...
          }
        ]
      }
    }

/*
 *  NOTE: Creating/modifying/updating requires sending a master password explicity in the params
 */

------ CREATE ------

POST /boards
  Authentication: Master password
  Parameters: (JSON/XML)
    {
      board[title]:"board_title"
      board[password]:"board_title"
      master_password:"master_password" // This will be defined in a config file, by default it is create_queue
    }
  Response: (JSON/XML)
    Success code: 200
    {
      title:"board_title",
      password:"board_title",
      active:true/false,
      frozen:true/false
    }

    Failure code: 401 // If, for example, you supply to wrong ta password
    {
      password: "You supplied an invalid password"
    }

------ UPDATE ------

PUT /boards/:board_title
  Authentication: Master password
  Parameters: (JSON/XML)
    {
      // Optional
      master_password:"some_password"

      board[frozen]:true/false,    // Must be TA
      board[active]:true/false     // Must be TA
      board[title]:"new_title",    // Must be TA or logged in at web interface
      board[password]:"new_title"  // Must be TA or logged in at web interface
    }
  Response: (JSON/XML)
    Success code: 200
    {
       // Same response as GET /boards/:board_title
    }

    Failure code: 401 // If, for example, you supply to wrong ta password
    {
      password: "You supplied an invalid password"
    }

------ DELETE ------

DELETE /boards/:board_title
  Authentication: Master password
  Parameters:
    { }

=========================
      QUEUE API
=========================

Actions:
---------
  URL:
    /boards/:board_title/queue/ -
      enter_queue - Authentication: Student
      exit_queue  - Authentication: Student
      freeze      - Authentication: TA


GET /boards/:board_title/queue
  Authentication: Student or TA
  Repsonse:
    Success code: 200
    {
      students:
      [
        {
          id:"some_id",
          username:"some_username"
        },
        {
          ...
        }
      ],
      tas:
      [
        {
          id:"some_id",
          username:"some_username",
          student:nil/"some_student_username"
        },
        {
          ...
        }
      ]
    }

=========================
        TA API
=========================

------ CREATE ------

POST /boards/:board_title/tas
  Authentication: Queue password sent in params
  Parameters:
    {
      queue_password:"some_password",  // TA's cannot create themselves without the queue password
      ta[username]:"some_username"
    }
  Response:
    Success code: 201 (created)
    {
      id:"ta_id",
      token:"ta_token", // HOLD ON TO THIS, you'll need it in most every request
      username:"some_username",
    }
    Failure code: 403 (Forbidden) if bad authentication, 422 (Unprocessable entity) if bad data
    {
      // Use this to notify the user of what went wrong
      some_error:"Something bad happened"
    }

------ READ ------

GET /boards/:board_title/tas
  Authentication: Student or TA
  Response:
    Success code: 200
    {
      tas:
      [
        {
          id:"some_id",
          username:"some_username",
          student:"some_student_name"   // The student this TA is currently helping, nil if none
        },
        {
          ...
        }
      ]
    }

GET /boards/:board_title/tas/:id
  Authentication: Student or TA
  Response: (JSON/XML)
    Success code: 200 (Success)
    {
      id:some_id_2,
      username:"user2", 
    }
    Failure code: 403 (Forbidden)
    { }

------ UPDATE ------
  
PUT /boards/:board_title/tas/:id
  Authentication: TA
  Parameters:
    {
      // Optional

      ta[username]:"some_new_username"
    }
  Response: (JSON/XML)
    Success code: 200 (Success)
    {
      // See GETing a Queue
    }
    Failure code: 403 (Forbidden) if bad authorization, 422 (Unprocessable Entity) if bad data
    { 
      // Should be used to notify the user of what went wrong
      username:"Another TA is already using this username"
    }

------ DELETE ------

DELETE /boards/:board_title/tas/:id
  Authentication: TA
  Response:
    Success code: 200
    {
      // Same as GET /boards/:board_title/tas/:id
    }


=========================
      STUDENT API
=========================

Actions:
---------
  URL:
    /boards/:board_title/queue/ -
      ta_accept - Authentication: TA
      ta_remove - Authentication: Student // Allows a TA to remove this student from the queue

----- CREATE ------

POST /boards/:board_title/students
  Authentication: None
  Parameters:
    {
      student[username]:"some_username",
      student[location]:"location"
    }
  Response:
    Success code: 201 (Created)
    {
      id:"some_id",
      token:"some_token",         // NOTE: Keep this around for future requests
      username:"some_username"
    }
    Failure code: 422 (Unprocessable Entity)
    {
      // Error depends on what was passed, these should be used to notify the user of a client
      // of what went wrong
      username:"Your username and location are already taken. Are you already logged in on another device?"
    }

------ READ ------

GET /boards/:board_title/students/:student_id
  Authentication: Student or TA
  Response: (JSON/XML)
    Success code: 200 (Success)
    {
      id:some_id_2,
      username:"user2", 
      location:"location2" 
    }
    Failure code: 403 (Forbidden)
    { }

GET /boards/:board_title/students
  Authentication: Student or TA
  Response: (JSON/XML)
    Success code: 200 (Success)
    {
      students:
      [
        {
          id:some_id_2,
          username:"user2", 
          location:"location2" 
        },
        {
          ...
        }
      ]
    }
    Failure code: 403 (Forbidden)
    { }

----- UPDATE -----

PUT /boards/:board_title/students/:student_id
  Authentication: Student
  Parameters:
  {
    // Optional parameters

    tutor[username] = "some_username"
    tutor[location] = "some_location"
  }
  Response: (JSON/XML)
    Success code: 200 (Success)
    { 
      // Same as GETting a Queue
    }
    Failure code: 403 (Forbidden)
    { }

----- DELETE -----

DELETE /boards/:board_title/students/:student_id
  Authentication: Student or TA
  Parameters:
  { }
  
